//Austin Marcus - March 2018
/*
 *   Adapted from existing code for COPE,
 *   Hester's modification for pipeline integration
 *
 *   All STS-R21 pipeline included in COPE plugin object
 *   Parameters for COPE specified as object fields
 */

var bvqx = BrainVoyagerQX;
var $ = bvqx.FindChild;

var o = new Object;

o.dialogFileName   = "COPE_v10.ui";
o.dialogAccessName = "PluginDialog";

//internal parameters for processing script
o.numBOLDFMRs = 0; 								//number of BOLD FMR files
o.numFieldMapFMRs = 0;            //number of non-BOLD FieldMap runs
o.numFMRs = 0;                    //sum of above two quantities = total number of FMR files
o.mCorrTarget = "";							//name of target FMR for motion correction
o.homeDir = "";								//name of base session directory
o.BVdir = "";								//name of BV subdirectory
o.fmrList = [];								//list of FMR files (created before COPE & preprocessing)

//name of file which contains list of task identifiers and volumes, comma-separated, one per line
o.volRefFileName = "/sts-data/Testing/MRI-Pipeline-Test/STS-R21-Volume-Reference.txt";
o.taskIDs = [];								//list of task identifier strings (e.g. MTLocal, Attention)
o.taskVols = [];							//list of expected number of volumes per task

o.fmrListString = "";							//string of FMR filenames separated by newline
o.vdmFile = "";								//name of VDM file generated by COPE

//***ALWAYS PUT THE AP IDENTIFIER FIRST***
o.vdmEstimate = ["*SpinEchoFieldMap*AP*.fmr", "*SpinEchoFieldMap*PA*.fmr"];					//filename identifier for opposite phase run for VDM estimation
o.mCorrTargetFileName = "motion_correction_target_file.txt";		//name of text file where motion corr target filename will be written
o.iaFile = "";                //name of IA transformation file
o.faFile = "";                //name of FA transformation file
o.sessionListFile = "";       //eventual location of session list file for VTC creation

//internal flags
o.preprocComplete = 1;

//parameters for COPE
o.vol0spinBox = 0; 	//volume for first VDM estimation target
o.vol1spinBox = 0;	//volume for second VDM estimation target
o.rllr = 0;		//phase encoding direction (rl-lr or ap-pa)
o.use_ic = 1;		//type of data (if 0, gradient echo)
o.use_ssd = 0;		//distance measure for local opt (if 0, normalized cross-corr (NCC))
o.apply_to_input = 0;	//apply VDM to input files used to estimate it
o.save_derivative = 0;  //save derivative of  for each FMRVDM
o.fast_algorithm = 0;	//use fast algorithm (only for testing)

o.selectHomeDirAndProcess = function() {
    this.homeDir = BrainVoyager.BrowseDirectory('Please select the subject directory:');
    this.makeBVdir();
    this.readVolRef();
    $("homeDirLabel").text = this.homeDir;
    bvqx.PrintToLog("Selected " + this.homeDir + " for processing");
    this.createFMRs();
    this.preprocess_fmrs();
    this.createFMRList();
    this.estimate();
    this.vdmBrowse();
    this.apply();
    this.updateList();
    this.create_vmr();
}

// --------------------------------BEGIN PIPELINE CODE-------------------------------------------

/*
 *   Master pipeline for STS-R21 data preprocessing.
 *   Austin Marcus - 2017/18 for Tarrlab @ Carnegie Mellon University
 *
 *   Current version (1/25/18) - GUI select session folder, create FMRs and preprocess
 *    (2/12/18) Process filenames to remove run number, move unfiltered to subdir,
 *              create VMR if MPRAGE run found, create text file listing all processed FMRs
 *
 *   (3/7/18) Major changes:
 * 		All pipeline code now included in COPE script controller.
 * 		"CMU Pipeline" tab of COPE v1.0 - select base session directory via GUI ("Select home directory" button);
 *		Script will do following:
 *			-Find all BOLD runs, set up BV subdirectory, create FMR files for each BOLD run in BV subdirectory
 *			-Estimate VDM using specified runs (OppPhase-PA, MTLocal as example)
 *			-Apply VDM to all generated FMR files
 *			-Preprocess all COPE-corrected FMRs (motion correction, HPF)
 *			-Create VMR from MPRAGE, if found
 */

//given base session dir, create BV subdir;
//find all BOLD runs, create FMR files with number stripped, place in BV subdir
//return the name of the FMR file to be used as motion correction target
o.createFMRs = function() {

    //get base subject directory via GUI
    //var homeDir = BrainVoyager.BrowseDirectory('Please select the subject directory:');
    var hDir = new QDir(this.homeDir);
    BrainVoyager.PrintToLog("Open " + hDir.dirName() + " for batch FMR creation");

    //extract base dir name
    var sName = hDir.dirName();

    //get all BOLD and FieldMap directories
    var folderList = hDir.entryList(["*BOLD*"]);
    this.numBOLDFMRs = folderList.length;
    var baseList = hDir.entryList();
    var fmList = hDir.entryList(["*SpinEcho*"]);
    this.numFieldMapFMRs = fmList.length;
    folderList = folderList.concat(fmList);
    this.numFMRs = folderList.length;
    var numRuns = baseList.length;
    BrainVoyager.PrintToLog("Found " + this.numBOLDFMRs + " BOLD runs");

    //find the run immediately after field map as target for motion correction
    var i;
    var motionCorrTarget;
    var checkStr = "_FieldMap_";
    var checkName = "BOLD";
    for(i = 0; i < numRuns; i++){
        if(i > 0 && baseList[i-1].indexOf(checkStr) >= 0 && baseList[i].indexOf(checkStr) < 0 && baseList[i].indexOf(checkName) >= 0){
            motionCorrTarget = baseList[i];
            var mcl = motionCorrTarget.split("/");
            motionCorrTarget = mcl[mcl.length-1];
            //append .fmr to run name for FMR file matching later
            motionCorrTarget += ".fmr";
            //strip name
            motionCorrTarget = strip_name(motionCorrTarget);
            BrainVoyager.PrintToLog("Found motion correction target: " + motionCorrTarget);
            break;
        }
    }

    //loop over each BOLD dir, get first DICOM file, create FMR;
    //all results (FMRs, STCs) placed in BV dir (_BV-<SNAME>)
    var counter;

    for (counter = 0; counter < this.numFMRs; counter++) {

        //get contents of run folder
        var curDir = this.homeDir + "/" + folderList[counter];
        //BrainVoyager.PrintToLog("DEBUG:: first BOLD dir = " + curDir);
        var cDir = new QDir(curDir);
        BrainVoyager.PrintToLog("Open " + cDir.dirName());
        var dcmList = cDir.entryList(["*.dcm"]);
        var numDCM = dcmList.length;
        BrainVoyager.PrintToLog("Found " + numDCM + " DICOM files");
	      var taskInd = this.findVolRef(cDir.dirName());
	      if(taskInd >= 0 && numDCM < this.taskVols[taskInd]){
		BrainVoyager.PrintToLog("Found an incomplete run: " + cDir.dirName() + " should have " + this.taskVols[taskInd] + " volumes - skipping");
		if(motionCorrTarget == (strip_name(folderList[counter]) + ".fmr")){
			motionCorrTarget = strip_name(folderList[counter+1]) + ".fmr";
			BrainVoyager.PrintToLog("Incomplete run was motion correction target! Updated target: " + motionCorrTarget);
		}
		continue;
	}
        var firstDCM  = curDir + "/" + dcmList[0];

        //extract run name
        var runName = cDir.dirName();
        var fmrName = this.BVdir + "/" + strip_name(runName) + ".fmr";
        BrainVoyager.PrintToLog("Creating FMR for " + runName);

        //use first DICOM file to create FMR, save and close
        var FMRdoc = BrainVoyager.CreateProjectMosaicFMR("DICOM", firstDCM, numDCM, 0, false, 69, runName, false, 954, 954, 2, this.BVdir,1, 106, 106);
        var fmrProject = FMRdoc;
        fmrProject.SaveAs(fmrName);
        fmrProject.Close();
        BrainVoyager.PrintToLog("Successfully created FMR for " + runName);
    }

    //get list of newly created FMRs
    var BVd = new QDir(this.BVdir);
    this.fmrList = BVd.entryList(["*.fmr"]);
    this.numFMRs = this.fmrList.length;

    //find the motion correction target file
    for(i = 0; i < this.fmrList.length; i++){
        this.fmrListString += this.fmrList[i] + "\n";
        if(this.fmrList[i].indexOf(motionCorrTarget) >= 0){
            this.mCorrTarget = this.fmrList[i];
            BrainVoyager.PrintToLog("Found updated motion corr target: " + this.mCorrTarget);
            this.mCorrTarget = this.BVdir + "/" + this.mCorrTarget;

            //write filename to string in case of interrupted pipeline
	          var mcFileName = this.BVdir + "/" + this.mCorrTargetFileName;
    	      var mcFile = new QFile(mcFileName);
    	      mcFile.open(new QIODevice.OpenMode(QIODevice.WriteOnly));
   	        var ts = new QTextStream(mcFile);
            ts.writeString(this.mCorrTarget);
    	      mcFile.close();
    	      BrainVoyager.PrintToLog("Successfully wrote motion correction target filename at " + mcFileName);
        }
    }
}

//set up BV subdirectory and save its name as global parameter this.BVdir
o.makeBVdir = function() {

    //set up BV subdir
    bvqx.PrintToLog("Setting up BV subdirectory under " + this.homeDir);
    var hd = new QDir(this.homeDir);
    var sName = hd.dirName();
    var BVname = "_BV-" + sName;
    this.BVdir = this.homeDir + "/" + BVname;
    if(!hd.exists(BVname)){
        bvqx.PrintToLog("BV subdirectory does not exist - creating it");
    	hd.mkdir(BVname);
    }
    else{
	bvqx.PrintToLog("BV subdirectory already exists.");
    }
}

o.preprocess_fmrs = function() {

    BrainVoyager.PrintToLog("Begin preprocessing for " + this.homeDir);

    //loop over FMRs to run motion corr, and hpf
    for(var counter = 0; counter < this.numFMRs; counter++){

        //get path to current FMR
        var curFMR = this.BVdir + "/" + this.fmrList[counter];
        if(this.fmrList[counter].indexOf("SpinEcho") >= 0){
          bvqx.PrintToLog("Found SpinEcho FMR -- skipping preprocessing");
          continue;
        }
        bvqx.PrintToLog("~~~~~~~~~~~~~DEBUG::Current FMR filename: " + curFMR);

        //re-open and run slice time correction, save and close
        var fmrProject = bvqx.OpenDocument(curFMR);
        //var success = fmrProject.CorrectSliceTiming(2,2);
        //var fmrName = fmrProject.FileNameOfPreprocessdFMR;
        //fmrProject.SaveAs(nameOfSliceTimeCorrectedFMR);
        //fmrProject.Close();
        //BrainVoyager.PrintToLog("Successfully ran slice time correction for " + fmrList[counter]);

        //run motion correction with sinc interpolation, save and close

	//if motion corr target filename not set, check the file
	if(this.mCorrTarget.length == 0){
		var mcFile = new QFile(this.mCorrTargetFileName);
    		mcFile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
    		var is = new QTextStream(mcFile);
    		var mcf = is.readLine();
    		if(mcf){
			this.mCorrTarget = mcf;
		}
		else{
			BrainVoyager.PrintToLog("ERROR: no motion correction target filename specified");
		}
    		fmrFileList.close();
	}

        fmrProject.CorrectMotionTargetVolumeInOtherRunEx(this.mCorrTarget, 1, 3, 1, 100, 0, 1);
        var resultName = fmrProject.FileNameOfPreprocessdFMR;
        fmrProject.SaveAs(resultName);
        fmrProject.Close();
        BrainVoyager.PrintToLog("Successfully ran motion correction for " + this.fmrList[counter]);

        //run hpf, save and close
        fmrProject = BrainVoyagerQX.OpenDocument(resultName);
        fmrProject.TemporalHighPassFilter(3, "cycles");
        fmrProject.Save();
        fmrProject.Close();
        BrainVoyager.PrintToLog("Successfully ran HPF for " + this.fmrList[counter]);
    }

    this.preprocComplete = 1;
}

o.create_vmr = function(){

    //extract sub name (base dir name)
    var hDir = new QDir(this.homeDir);
    var sName = hDir.dirName();
    BrainVoyager.PrintToLog("Open " + sName + " for VMR creation");

    //get MPRAGE directories
    var folderList = hDir.entryList(["*MPRAGE*"]);
    if(folderList.length == 0){
      folderList = hDir.entryList(["*mpr_sag*"]);
    }
    var baseList = hDir.entryList();
    var numVMRs = folderList.length;
    BrainVoyager.PrintToLog("Found " + numVMRs + " anatomical runs");

    if(numVMRs == 0){
        return;
    }

    //go into first MPRAGE dir, get first DICOM file
    var anatDir = this.homeDir + "/" + folderList[0];
    var aDir = new QDir(anatDir);
    BrainVoyager.PrintToLog("Open " + aDir.dirName() + " for VMR");
    var dcmList = aDir.entryList(["*.dcm"]);
    var numDCM = dcmList.length;
    BrainVoyager.PrintToLog("Found " + numDCM + " DICOM files");
    var firstDCM  = anatDir + "/" + dcmList[0];

    //create VMR, save as <sName>-Anat_Unframed
    var VMRname = this.BVdir + "/" + sName + "-Anat_Unframed.vmr";
    var VMRdoc = BrainVoyagerQX.CreateProjectVMR("DICOM",firstDCM,176,false,256,256,2);
    BrainVoyager.PrintToLog("Created VMR for " + sName + " in " + VMRname);
    VMRdoc.SaveAs(VMRname);
    VMRdoc.Close();
}


//open VMR file,
o.runBBR = function() {
    if(this.homeDir.length == 0){
      this.homeDir = BrainVoyager.BrowseDirectory('Please select the subject directory:');
    }
    if(this.BVdir.length == 0){
      this.makeBVdir();
    }
    BrainVoyager.PrintToLog("Setting up for BBR");
    //get VMR file
    var bvd = new QDir(this.BVdir);
    var vmrList = bvd.entryList(["*Anat.vmr"]);
    var vmr = vmrList[0];
    var vmrProject = BrainVoyagerQX.OpenDocument(this.BVdir + "/" + vmr);
    BrainVoyager.PrintToLog("Using VMR file: " + this.BVdir + "/" + vmr);

    //if motion corr target filename not set, check the file
    if(this.mCorrTarget.length == 0){
      BrainVoyager.PrintToLog("Target FMR filename not set - checking file " + this.mCorrTargetFileName);
    	var mcFile = new QFile(this.BVdir + "/" + this.mCorrTargetFileName);
    	mcFile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
    	var is = new QTextStream(mcFile);
    	var mcf = is.readLine();
    	if(mcf){
    		this.mCorrTarget = mcf;
    	}
    	else{
    		BrainVoyager.PrintToLog("ERROR: no target FMR filename specified");
    	}
    	mcFile.close();
    }

    if(this.mCorrTarget.indexOf("THP3c") < 0){
      this.mCorrTarget = this.mCorrTarget.substring(0, this.mCorrTarget.length-4) + "_3DMCS_LTR_THP3c_undist.fmr";
    }

    BrainVoyager.PrintToLog("Using target FMR: " + this.mCorrTarget);

    //run BBR with motion corr target
    var success = vmrProject.CoregisterFMRToVMRUsingBBR(this.mCorrTarget);
    if(success){
    	BrainVoyager.PrintToLog("Successfully ran BBR with " + vmr + " and " + this.mCorrTarget);
    }
    else{
    	BrainVoyager.PrintToLog("ERROR: BBR did not complete properly for " + vmr + " and " + this.mCorrTarget);
    }

    //get and save names of TRF files
    var iaList = bvd.entryList(["*IA.trf"]);
    var faList = bvd.entryList(["*FA.trf"]);
    this.iaFile = this.BVdir + "/" + iaList[0];
    this.faFile = this.BVdir + "/" + faList[0];
}

//create session list file
o.createSessionListFile = function() {
  if(this.homeDir.length == 0){
    this.homeDir = BrainVoyager.BrowseDirectory('Please select the subject directory:');
  }
  if(this.BVdir.length == 0){
    this.makeBVdir();
  }
  BrainVoyager.PrintToLog("Set up access to BV subdirectory");
  var bvd = new QDir(this.BVdir);
  var hd = new QDir(this.homeDir);
  //check for missing pieces
  if(this.iaFile.length == 0){
    this.iaFile = bvd.entryList(["*IA.trf"])[0];
  }
  BrainVoyager.PrintToLog("Set IA TRF file: " + this.iaFile);
  if(this.faFile.length == 0){
    this.faFile = bvd.entryList(["*FA.trf"])[0];
  }
  BrainVoyager.PrintToLog("Set FA TRF file: "+ this.faFile);
  if(this.fmrList.length == 0){
    BrainVoyager.PrintToLog("Reading FMR list back in");
    var fmrNamesFilename = this.BVdir + "/FMRlist_processed.txt";
    var inFile = new QFile(fmrNamesFilename);
    inFile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
    var istr = new QTextStream(inFile);
    var fmr = istr.readLine();
    while(fmr){
      //at this point, only want to read in
      //functional runs - don't care about
      //opposite phase BOLD run now
      if(fmr.indexOf("Run") >= 0){
        bvqx.PrintToLog("Found a run in file: " + fmr);
        this.fmrList.push(fmr);
        this.numBOLDFMRs++;
      }
      fmr = istr.readLine();
    }
    inFile.close();
  }
  BrainVoyager.PrintToLog("FMR list checked: " + this.fmrList.length + " functional files found");
  var dirName = hd.dirName();
  var filename = this.BVdir + "/" + dirName + "_SessionList.txt";
  this.sessionListFile = filename;
  var outFile = new QFile(filename);
  outFile.open(new QIODevice.OpenMode(QIODevice.WriteOnly));
  var ts = new QTextStream(outFile);
  BrainVoyager.PrintToLog("Initialized session list text file");
  var vmr = bvd.entryList(["*Anat.vmr"]);
  //write number of FMRs
  ts.writeString("" + (this.numBOLDFMRs+3) + "\n");
  BrainVoyager.PrintToLog("Wrote number of files");
  //write name of VMR file
  ts.writeString(this.BVdir+ "/" + vmr[0] + "\n");
  BrainVoyager.PrintToLog("Wrote VMR name");
  //write names of transformation files
  ts.writeString(this.BVdir+ "/" + this.faFile + "\n");
  ts.writeString(this.BVdir+ "/" + this.iaFile + "\n");
  BrainVoyager.PrintToLog("Wrote TRF filenames");
  //write names of all FMR files
  for(var ind in this.fmrList){
    if(this.fmrList[ind].indexOf("Run") >= 0){
      ts.writeString(this.BVdir+ "/" + this.fmrList[ind] + "\n");
      var newind = ind+1;
      BrainVoyager.PrintToLog("Wrote FMR #" + newind);
    }
  }
  //write contents of bbx
  var bxl = bvd.entryList(["*.bbx"]);
  var bbxName = this.BVdir + "/" + bxl[0];
  var bxf = new QFile(bbxName);
  bxf.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
  var is = new QTextStream(bxf);
  //discard first two lines
  is.readLine();
  is.readLine();
  var tline = is.readLine();
  while(tline){
    ts.writeString(tline + "\n");
    tline = is.readLine();
  }
  BrainVoyager.PrintToLog("Wrote BoundingBox file contents");
  bxf.close();
  outFile.close();
  BrainVoyager.PrintToLog("Finished writing session list file");
}

//create VTC files for each FMR
//code directly taken from Deb Johnson's VTC Maker bot
o.createVTCs = function() {
  var name = this.sessionListFile;
  var fmr_files = [];
  var vtc_names = [];
  var x_start = [];
  var x_end = [];
  var y_start = [];
  var y_end = [];
  var z_start = [];
  var z_end = [];
  var filecounter;
  BrainVoyagerQX.PrintToLog("Reading: " + name);
  var filenamesfile = new QFile(name);
  filenamesfile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
  var textstr = new QTextStream(filenamesfile);
  var nroffiles = parseInt(textstr.readLine());
  var VMR_path = textstr.readLine();
  var FA_path = textstr.readLine();
  var IA_path = textstr.readLine();
  var fmr_regex = /.fmr/;
  var name_regex = /.*[^(.fmr)]/;
  var xcoords_regex = /(BV.*X\: )(\d+)( )(\d+)/;
  var ycoords_regex = /(BV.*Y\: )(\d+)( )(\d+)/;
  var zcoords_regex = /(BV.*Z\: )(\d+)( )(\d+)/;
  for (filecounter = 0; filecounter < nroffiles; filecounter++) {
    var filename = textstr.readLine();
    if(name_regex.test(filename) == true) {
      var match = name_regex.exec(filename);
      var vtc = "_NATIVE.vtc";
      var newmatch = match + vtc;
      vtc_names.push(newmatch);
    }
    if(fmr_regex.test(filename) == true) {
    fmr_files.push(filename);
    }
    if(xcoords_regex.test(filename) == true) {
      var match = xcoords_regex.exec(filename);
      x_start.push(match[2]);
      x_end.push(match[4]);
    }
    if(ycoords_regex.test(filename) == true) {
      var match = ycoords_regex.exec(filename);
      y_start.push(match[2]);
      y_end.push(match[4]);
    }
    if(zcoords_regex.test(filename) == true) {
      var match = zcoords_regex.exec(filename);
      z_start.push(match[2]);
      z_end.push(match[4]);
    }
  }
  var i;
  var new_number = (nroffiles-3);
  for (i=0; i<new_number; i++) {
    var VMR = BrainVoyagerQX.OpenDocument(VMR_path);
    VMR.UseBoundingBoxForVTCCreation = true;
    VMR.TargetVTCBoundingBoxXStart  = x_start;
    VMR.TargetVTCBoundingBoxXEnd    = x_end;
    VMR.TargetVTCBoundingBoxYStart  = y_start;
    VMR.TargetVTCBoundingBoxYEnd   = y_end;
    VMR.TargetVTCBoundingBoxZStart  = z_start;
    VMR.TargetVTCBoundingBoxZEnd   = z_end;
    VMR.ExtendedTALSpaceForVTCCreation = false;
    //VTC Parems: 2,2,2,100 : 2 = float, 2 = resolution (2mm), 2 = sinc interpolation, 100 = threshold if no .bbx
    var make_VTC = VMR.CreateVTCInVMRSpace(fmr_files[i], IA_path, FA_path, vtc_names[i], 2, 2, 2, 100);
    VMR.Close();
  }
  filenamesfile.close();
}

//strip "_BOLD_" and run numbers from strings
//used to clean FMR filenames
function strip_name(fname){
    var cstr = "_BOLD_";
    var ind = 0;
    var len = 0;
    var ind_check = fname.indexOf(cstr);
    if(ind_check > 0){
   		ind = ind_check;
  		len = cstr.length;
    }
    else{
      return fname.substring(fname.indexOf("_") + 1);
    }
    return fname.substring(ind+len);
}

//go into BV dir, find processed FMRs,
//dump filenames to text file named "FMRlist.fmr"
o.createFMRList = function(){

    //extract sub name (base dir name)
    var hDir = new QDir(this.homeDir);
    var sName = hDir.dirName();
    BrainVoyager.PrintToLog("Creating FMR list file for " + sName);
    var BVd = new QDir(this.BVdir);

    //get FMR file list
    var checkStr = "";
    if(this.preprocComplete){
	    checkStr = "*THP3c.fmr";
    }
    else{
 	    checkStr = "*.fmr";
    }
    var list = BVd.entryList([checkStr]);
    var numFiles = list.length;
    BrainVoyager.PrintToLog("Found " + numFiles + " FMRs");

    if(this.numBOLDFMRs == 0){
    	this.numBOLDFMRs = numFiles;
    }

    //write filenames to text
    var listFileName = this.BVdir + "/FMRlist.txt";
    var listFile = new QFile(listFileName);
    listFile.open(new QIODevice.OpenMode(QIODevice.WriteOnly));
    var ts = new QTextStream(listFile);
    this.fmrList = [];
    this.fmrListString = "";
    for(var fname in list){
      this.fmrList.push(list[fname]);
      this.fmrListString += list[fname] + "\n";
      ts.writeString(list[fname] + "\n");
    }
    listFile.close();
    BrainVoyager.PrintToLog("Successfully wrote FMR list file at " + listFileName);
}

//read in volume reference file,
//create internal lists of tasks and the expected number of volumes
o.readVolRef = function() {
    bvqx.PrintToLog("Reading volume references");
    var volList = new QFile(this.volRefFileName);
    volList.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
    var is = new QTextStream(volList);
    var ref = is.readLine();
    while(ref){
	var parts = ref.split(',');
	this.taskIDs.push(parts[0]);
	this.taskVols.push(parts[1]);
	ref = is.readLine();
    }
    volList.close();
}

o.findVolRef = function(runName){
    for(var count = 0; count < this.taskIDs.length; count++){
	if(runName.indexOf(this.taskIDs[count]) >= 0){
		return count;
	}
    }
    BrainVoyager.PrintToLog("Didn't find task name in reference list - no expected volume count");
    return -1;
}

//update FMR list - append "_undist" before .fmr for each file
//rewrite all FMR names to new file list
o.updateList = function() {
    BrainVoyager.PrintToLog("Updating FMR filenames to undistorted versions");
    //BrainVoyager.PrintToLog("Current internal FMR list shows " + this.fmrList.length + " FMR files");
    for(var count = 0; count < this.fmrList.length; count++){
	    var base = this.fmrList[count].substring(0, this.fmrList[count].length-4);
	    this.fmrList[count] = base + "_undist.fmr";
      //BrainVoyager.PrintToLog("New name: " + this.fmrList[count]);
    }
    var nFileName = "FMRlist_processed.txt";
    var outFile = new QFile(this.BVdir + "/" + nFileName);
    outFile.open(new QIODevice.OpenMode(QIODevice.WriteOnly));
    var os = new QTextStream(outFile);
    for(count = 0; count < this.fmrList.length; count++){
      //BrainVoyager.PrintToLog("Writing " + this.fmrList[count]);
      var str = this.fmrList[count] + "\n";
      os.writeString(str);
    }
    outFile.close();
}

//utility function - given full path, get filename from end
o.getFileFromPath = function(pathStr) {
    var parts = pathStr.split("/");
    return parts[parts.length-1];
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ END PIPELINE CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Called for the Browse buttons in the Estimate VDM tab.
function select_input(index) {
    bvqx.SetPluginStringParameter("task", "select_fmr_or_dmr");
    bvqx.ExecutePlugin();
    var filename = bvqx.GetPluginStringParameter("filename");
    if (filename) {
        var edit = $("filenameEdit"+index);
        var spinBox = $("volumeSpinBox"+index);
        edit.text = filename;
        spinBox.maximum = bvqx.GetPluginIntParameter("nr_of_volumes");
        spinBox.value = bvqx.GetPluginIntParameter("display_volume");
    }
}


o.initDlg = function() {
    var dlg = this.PluginDialog;

    // Pipeline
    $("pipelineButton").clicked.connect(this, this.selectHomeDirAndProcess); // ADDED FOR PIPELINE
    $("bbrButton").clicked.connect(this, this.runBBR);
    $("fileGenButton").clicked.connect(this, this.createSessionListFile);
    $("vtcButton").clicked.connect(this, this.createVTCs);


    // Estimate VDM tab
    $("browseButton0").clicked.connect(function() { select_input(0); });
    $("browseButton1").clicked.connect(function() { select_input(1); });
    $("estimateCloseButton").clicked.connect(this, this.close);
    $("estimateRunButton").clicked.connect(this, this.estimate);

    // Apply VDM tab
    $("vdmBrowseButton").clicked.connect(this, this.vdmBrowse);
    $("addButton").clicked.connect(this, this.add);
    $("checkButton").clicked.connect(this, this.check);
    $("applyCloseButton").clicked.connect(this, this.close);
    $("applyRunButton").clicked.connect(this, this.apply);

    bvqx.PrintToLog($("textBrowser").source);
    var sample_path = bvqx.PathToSampleData;
    var html_index = sample_path.replace("SampleData/", "Extensions/Plugins_64/CopePluginHelp/index.html");
    var html_index_file =  "file:///".concat(html_index);
    $("textBrowser").source = new QUrl(html_index_file);
    bvqx.PrintToLog($("textBrowser").source);

}


// Called for the Close buttons.
o.close = function() {
    this.PluginDialog.close();
}


// Called for the Run button on the Estimate VDM tab.
o.estimate = function() {
    // open FMR/DMR -- the C++ code needs an open FMR/DMR to create .map files
    //extract sub name (base dir name)
    var hDir = new QDir(this.homeDir);
    var sName = hDir.dirName();
    var BVd = new QDir(this.BVdir);
    BrainVoyager.PrintToLog("Open " + this.BVdir + " for VDM estimation");

    //get AP and PA spin echo field map files
    var file0list = BVd.entryList([this.vdmEstimate[0]]);
    var file1list = BVd.entryList([this.vdmEstimate[1]]);
    /*
    if(this.vdmEstimate[1].length == 0){
        if(this.mCorrTarget.length > 0){
	        this.vdmEstimate[1] = this.getFileFromPath(this.mCorrTarget);
        }
        else{
          var mcFile = new QFile(this.BVdir + "/" + this.mCorrTargetFileName);
        	mcFile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
        	var is = new QTextStream(mcFile);
        	var mcf = is.readLine();
        	if(mcf){
        		this.mCorrTarget = mcf;
            var fname = this.getFileFromPath(mcf);
            var partialName = fname.substring(0, fname.length-4);
            this.vdmEstimate[1] = partialName + "*THP3c.fmr";
        	}
        	else{
        		BrainVoyager.PrintToLog("ERROR: no target FMR filename specified");
        	}
        	mcFile.close();
        }
    }
    BrainVoyager.PrintToLog("DEBUG::Name of target FMR: " + this.vdmEstimate[1]);
    var file1list = BVd.entryList([this.vdmEstimate[1]]);
    */
    var file0text = file0list[0];
    var file1text = file1list[0];

    for(var i = 0; i < file0list.length; i++){
      if(file0list[i].indexOf("pF68") < 0){
        file0text = file0list[i];
        break;
      }
    }
    for(var i = 0; i < file1list.length; i++){
      if(file1list[i].indexOf("pF68") < 0){
        file1text = file1list[i];
        break;
      }
    }

    var file0 = this.BVdir + "/" + file0text;
    var file1 = this.BVdir + "/" + file1text;

    //setTimeout(estimate, 2000);

    BrainVoyager.PrintToLog("Found AP and PA Spin Echo Field Map runs: " + file0 + " and " + file1);

    bvqx.OpenDocument(file0);
    bvqx.PrintToLog("Opened " + file0 + " :: setting VDM estimation parameters");

    // set parameters
    bvqx.SetPluginStringParameter("file0", file0);
    bvqx.SetPluginStringParameter("file1", file1);
    bvqx.SetPluginIntParameter("volume0", this.vol0spinBox);
    bvqx.SetPluginIntParameter("volume1", this.vol1spinBox);
    bvqx.SetPluginIntParameter("rllr", this.rllr);
    bvqx.SetPluginIntParameter("use_ic", this.use_ic);
    bvqx.SetPluginIntParameter("use_ssd", this.use_ssd);
    bvqx.SetPluginIntParameter("apply_to_input", this.apply_to_input);
    //bv.SetPluginIntParameter("correct_motion", $("correctMotion").checked);
    bvqx.SetPluginIntParameter("save_derivative", this.save_derivative);
    bvqx.SetPluginIntParameter("fast_algorithm", this.linear_algorithm);

    // call C++ function
    bvqx.SetPluginStringParameter("task", "estimate");

    bvqx.PrintToLog("Parameters set: calling COPE to estimate VDM");

    bvqx.ExecutePlugin();
}


// AIM (3/7/18) - looks for vdm file in BV subdirectory,
// gets filename and sets it as global param this.vdmFile
o.vdmBrowse = function() {

  //BV subdir
  var BVd = new QDir(this.BVdir);

  //check that 2nd VDM estimation target name set, read in if not
  /*
  if(this.vdmEstimate[1].length == 0){
  	var mcFile = new QFile(this.mCorrTargetFileName);
  	mcFile.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
  	var is = new QTextStream(mcFile);
  	var mcf = is.readLine();
  	if(mcf){
  		this.vdmEstimate[1] = this.getFileFromPath(mcf);
  	}
  	else{
  		BrainVoyager.PrintToLog("ERROR: no motion correction target filename specified");
  	}
  	fmrFileList.close();
  }
  */

  //AP file identifier should be vdmEstimate[0] - we want top apply the AP VDM map
  //to all functional runs, as they were collected with AP phase encoding
  var baseName = this.vdmEstimate[0];
  var fname = baseName.substring(0, baseName.length-4);
  var fcheck = fname + "_vdm.map";
  var vdms = BVd.entryList([fcheck]);
  this.vdmFile = this.BVdir + "/" + vdms[0];
  BrainVoyager.PrintToLog("Got VDM file: " + this.vdmFile);
}


//instead of adding filename to field, read in
//contents of text file with all FMRs (AIM, Feb 2018)
o.add = function() {

  //BV subdir
  var BVd = new QDir(this.BVdir);

  //read in FMR list file
  var fmrs = BVd.entryList(["FMRList.fmr"]);

  //make sure it exists
  var filename = fmrs[0];
  if(filename == null){
	   bvqx.PrintToLog("ERROR: no FMR list found. Aborting.");
	    return;
  }

  //read FMR filenames from list into a string
  //each filename separated by newline
  bvqx.PrintToLog("Reading FMR names from " + filename);
  var fmrFileList = new QFile(filename);
  var fmrList = "";
  fmrFileList.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
  var is = new QTextStream(fmrFileList);
  var fmr = is.readLine();
  while(fmr){
    fmrList += fmr + "\n";
    fmr = is.readLine();
  }
  fmrFileList.close();

  //return the list of FMR filenames
  return fmrList;
}

o.check = function() {
    bvqx.SetPluginStringParameter("files", $("textEdit").plainText);
    bvqx.SetPluginStringParameter("task", "check");
    bvqx.ExecutePlugin();
}

//AIM (3/7/18) - takes string of filenames created during pipeline
o.apply = function() {

    bvqx.PrintToLog("Setting parameters for applying VDM");
    //if previous steps haven't been completed in current session,
    //will need to read in list of FMR files from text file and
    //initialize some internal params
    var reRead = 0;
    if(this.fmrListString.length == 0){
      reRead = 1;
      bvqx.PrintToLog("FMR list not found. Reading from file.");
      var fName = this.BVdir + "/FMRlist.txt";
      var fileIn = new QFile(fName);
      fileIn.open(new QIODevice.OpenMode(QIODevice.ReadOnly));
      var is = new QTextStream(fileIn);
      var txt = is.readLine();
      while(txt){
        if(txt.indexOf("THP3c") >= 0){
          this.numFMRs++;
          this.fmrList.push(txt);
          this.fmrListString += this.BVdir + "/" + txt + "\n";
        }
        txt = is.readLine();
      }
      fileIn.close();
      bvqx.PrintToLog("Successfully read in names of " + this.numFMRs + " FMR filenames");
    }
    //bvqx.PrintToLog("String of filenames:: " + this.fmrListString);

    files = this.fmrListString.split("\n");
    //get rid of last entry (empty)
    files.pop();

    if (files.length == 0){
      bvqx.PrintToLog("No FMR files found - exiting");
      return;
    }

    if(files[0].indexOf(this.BVdir) < 0){
      bvqx.PrintToLog("Prepending absolute path to FMR filenames");
      //need to prepend path to filenames
      this.fmrListString = "";
      for(var i = 0; i < files.length; i++){
        this.fmrListString += this.BVdir + "/" + files[i] + "\n";
      }
    }

    files = this.fmrListString.split("\n");
    files.pop();
    this.fmrListString = this.fmrListString.substring(0, this.fmrListString.length-1);

    bvqx.PrintToLog("Current list of FMR files to have VDM applied:\n" + this.fmrListString);

    //bvqx.PrintToLog("Sanity check no. 2: BV dir is " + this.BVdir);

    bvqx.PrintToLog("Confirm: applying VDM to " + files.length + " FMRs");
    bvqx.PrintToLog("Confirm: VDM file to apply: " + this.vdmFile);

    bvqx.OpenDocument(files[0]);

    bvqx.SetPluginIntParameter("rllr", this.rllr);
    bvqx.SetPluginStringParameter("vdm", this.vdmFile);
    bvqx.SetPluginStringParameter("files", this.fmrListString);
    bvqx.SetPluginStringParameter("task", "apply");

    bvqx.ExecutePlugin();

    bvqx.PrintToLog("Applied VDM to all FMRs for " + this.homeDir);

}


o
